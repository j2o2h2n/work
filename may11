import React, {
  useState,
  useMemo,
  useCallback,
  useRef,
  useEffect,
} from "react";
import {
  Container,
  Badge,
  Stack,
  Button,
  Modal,
  Form,
  Table,
  Popover,
  OverlayTrigger,
} from "react-bootstrap";
import {
  QuestionCircleFill,
  ExclamationTriangleFill,
  PencilSquare,
  XOctagonFill,
  ArrowRepeat,
  ArrowLeftRight,
  InfoCircleFill,
} from "react-bootstrap-icons";
import "bootstrap/dist/css/bootstrap.min.css";
// import './App.css'; // Make sure this file exists or create it for custom styles

// --- AgGrid Imports ---
import { AgGridReact } from "ag-grid-react";
import "ag-grid-community/styles/ag-grid.css";
import "ag-grid-community/styles/ag-theme-alpine.css";
import { ModuleRegistry } from "ag-grid-community";
import {
  ClientSideRowModelModule,
  RowStyleModule,
  PaginationModule,
  RowSelectionModule,
  CellStyleModule,
  ColumnApiModule, // For column API related functions
  ColumnAutoSizeModule, // For sizeColumnsToFit
} from "ag-grid-community";

// Register the required AG Grid modules
ModuleRegistry.registerModules([
  ClientSideRowModelModule,
  RowStyleModule,
  PaginationModule,
  RowSelectionModule,
  CellStyleModule,
  ColumnApiModule,
  ColumnAutoSizeModule,
]);

// --- Sample Data (for demonstration) ---
const sampleHistory = [
  {
    action: "MODIF_COMMENTAIRE",
    commentaire: "Initial comment",
    utilisateur: "USER_A",
    date: "20 Apr 2025 10:00:00",
  },
  {
    action: "MODIF_COMMENTAIRE",
    commentaire: "Updated details",
    utilisateur: "USER_B",
    date: "21 Apr 2025 11:05:22",
  },
  {
    action: "SUPPRESSION",
    commentaire: "Marked for deletion",
    utilisateur: "USER_A",
    date: "22 Apr 2025 14:15:01",
  },
  {
    action: "ANNULE_SUPPRESSION",
    commentaire: "Deletion cancelled",
    utilisateur: "USER_C",
    date: "23 Apr 2025 09:20:15",
  },
];

const dealsData = [
  {
    id: "3613012",
    type: "CC F A",
    reference: "3613012",
    contrepartie: "70788432",
    dateValeur: "28 Feb 2024",
    montantAchat: "8.63 EUR",
    montantVendu: "15.00 NZD N",
    coursClient: "1.7378180",
    montantBaseAchat: "8.63",
    montantBaseVendu: "15.00",
    coursBase: "1.7378180",
    etatDateImport: "27/03/24\n0 - \n[1827565]",
    commentaire: "First deal, requires review.",
    history: sampleHistory.slice(0, 2),
  },
  {
    id: "3613059",
    type: "CC F A",
    reference: "3613059",
    contrepartie: "70788432",
    dateValeur: "28 Feb 2024",
    montantAchat: "84,380.21 GBP N",
    montantVendu: "94,277.38 CHF",
    coursClient: "1.1172926",
    montantBaseAchat: "84,380.21",
    montantBaseVendu: "94,277.38",
    coursBase: "1.1172926",
    etatDateImport: "27/03/24\n0 - \n[1827627]",
    commentaire: "Large GBP transaction, verify counterparty limits.",
    history: [],
  },
  {
    id: "SC076523",
    type: "TC F A",
    reference: "3706694\nSC076523",
    contrepartie: "CUST001",
    dateValeur: "02 Sep 2024",
    montantAchat: "2,850.12 EUR",
    montantVendu: "2,400.92 GBP N",
    coursClient: "0.8423938",
    montantBaseAchat: "2,850.12",
    montantBaseVendu: "2,400.92",
    coursBase: "0.8423938",
    etatDateImport: "03/09/24\n5 - \n[1907358]",
    commentaire: "Term contract, spot cover confirmed.",
    history: sampleHistory.slice(1, 3),
  },
  {
    id: "3706695",
    type: "TT F A",
    reference: "3706695",
    contrepartie: "CUST002",
    dateValeur: "02 Sep 2024",
    montantAchat: "5,887,000.00 GBP N",
    montantVendu: "6,988,418.01 EUR",
    coursClient: "0.8423938",
    montantBaseAchat: "5,887,000.00",
    montantBaseVendu: "6,988,418.01",
    coursBase: "0.8423938",
    etatDateImport: "03/09/24\n0 - \n[1907365]",
    commentaire: null,
    history: [],
  },
  {
    id: "3710039",
    type: "CC F M",
    reference: "3710039",
    contrepartie: "70491515",
    dateValeur: "11 Sep 2024",
    montantAchat: "366.24 DKK N",
    montantVendu: "49.08 EUR",
    coursClient: "7.4621000",
    montantBaseAchat: "366.24",
    montantBaseVendu: "49.08",
    coursBase: "7.4621000",
    etatDateImport: "09/09/24\n5 - \n[1910243]",
    commentaire: "Minor currency transaction, auto-processed.",
    history: sampleHistory.slice(3, 4),
  },
  {
    id: "3710040",
    type: "CC F M",
    reference: "3710040",
    contrepartie: "70491515",
    dateValeur: "11 Sep 2024",
    montantAchat: "229.94 NOK N",
    montantVendu: "19.22 EUR",
    coursClient: "11.9658000",
    montantBaseAchat: "229.94",
    montantBaseVendu: "19.22",
    coursBase: "11.9658000",
    etatDateImport: "09/09/24\n5 - \n[1910129]",
    commentaire: "Linked to 3710039.",
    history: [],
  },
  {
    id: "CC149589",
    type: "CC F A",
    reference: "3712941\nCC149589",
    contrepartie: "70788432",
    dateValeur: "18 Sep 2024",
    montantAchat: "4,499.44 EUR",
    montantVendu: "5,000.00 USD N",
    coursClient: "1.1112500",
    montantBaseAchat: "4,499.44",
    montantBaseVendu: "5,000.00",
    coursBase: "1.1112500",
    etatDateImport: "18/09/24\n5 - \n[1914715]",
    commentaire: "Standard EUR/USD spot.",
    history: sampleHistory,
  },
];

const gridOptionsObject = {
  // Renamed from gridOptions to avoid conflict if used as prop name
  getRowStyle: (params) => {
    if (!params.data || params.data.isCommentRow) {
      return null;
    }
    // Find the original index of the data row in the initial dealsData array
    const originalDataRowIndex = dealsData.findIndex(
      (deal) => deal.id === params.data.originalId
    );

    if (originalDataRowIndex !== -1) {
      if (originalDataRowIndex % 2 === 0) {
        // Even original data rows
        return { background: "#f2f2f2" }; // Light grey
      } else {
        // Odd original data rows
        return { background: "#ffffff" }; // White
      }
    }
    return null;
  },
};

const TypeCellRenderer = ({ data, context }) => {
  if (!data || data.isCommentRow) return null;

  const parts = data.type ? data.type.split(" ") : [];
  if (parts.length === 3) {
    return (
      <Stack
        direction="horizontal"
        gap={1}
        className="align-items-center h-100"
      >
        <span>{parts[0]}</span>
        <span>{parts[1]}</span>
        <Button
          variant="link"
          size="sm"
          className="p-0 mx-1 text-primary"
          onClick={() => context.handleShowHistoryModal(data)}
          title={`Show history for ${data.reference}`}
          aria-label={`Show history for ${data.reference}`}
        >
          <InfoCircleFill size={14} />
        </Button>
        <span>{parts[2]}</span>
      </Stack>
    );
  }
  return <span className="cell-pre-line">{data.type}</span>;
};

const DealsTable = () => {
  const [rowData, setRowData] = useState([]); // For dynamic updates if needed
  const totalDeals = dealsData.length;
  const orphansToComment = dealsData.filter((d) => !d.commentaire).length; // Example calculation
  const maxCommentLength = 254;

  const [showHistoryModal, setShowHistoryModal] = useState(false);
  const [selectedDealHistory, setSelectedDealHistory] = useState([]);
  const [selectedDealReference, setSelectedDealReference] = useState("");
  const [showCommentModal, setShowCommentModal] = useState(false);
  const [commentingDealId, setCommentingDealId] = useState(null);
  const [currentComment, setCurrentComment] = useState("");

  const gridRef = useRef(null);

  const expandedDealsData = useMemo(() => {
    return dealsData.flatMap((deal) => [
      { ...deal, isCommentRow: false, originalId: deal.id },
      {
        id: `${deal.id}-comment`,
        isCommentRow: true,
        originalId: deal.id, // Link comment row to its parent deal
        // other fields can be null/undefined or copied if needed by spanned cell
        reference: deal.reference, // Keep for context if comment refers to it
      },
    ]);
  }, []); // Re-calculate if dealsData changes and is a state/prop

  useEffect(() => {
    setRowData(expandedDealsData);
  }, [expandedDealsData]);

  const handleShowHistoryModal = useCallback((deal) => {
    setSelectedDealHistory(deal.history || []);
    setSelectedDealReference(
      deal.reference ? deal.reference.replace(/\n/g, " ") : ""
    );
    setShowHistoryModal(true);
  }, []);

  const handleShowCommentModal = useCallback((dealId) => {
    const dealToComment = dealsData.find((d) => d.id === dealId);
    if (dealToComment) {
      setCommentingDealId(dealId);
      setCurrentComment(dealToComment.commentaire || "");
      setShowCommentModal(true);
    }
  }, []);

  const handleCloseCommentModal = () => {
    setShowCommentModal(false);
    setCurrentComment("");
    setCommentingDealId(null);
  };

  const handleCommentChange = (event) => {
    if (event.target.value.length <= maxCommentLength) {
      setCurrentComment(event.target.value);
    }
  };

  const handleSaveComment = () => {
    if (commentingDealId) {
      console.log(
        `Saving comment for deal ${commentingDealId}: "${currentComment}"`
      );
      // --- IMPORTANT: Update your actual data source here ---
      // This example doesn't persist the change in dealsData directly
      // If dealsData were state, you would update it here:
      // const updatedDeals = dealsData.map(d =>
      //     d.id === commentingDealId ? { ...d, commentaire: currentComment } : d
      // );
      // setDealsDataState(updatedDeals); // Assuming dealsData is a state
      // For this example, we'll just log. To see it in the grid, you'd need to update `dealsData`
      // and ensure `expandedDealsData` recalculates, then `setRowData`.
      const dealInOriginal = dealsData.find((d) => d.id === commentingDealId);
      if (dealInOriginal) dealInOriginal.commentaire = currentComment; // Mutating for demo simplicity
      setRowData(
        dealsData.flatMap((deal) => [
          // Force re-render of rowData
          { ...deal, isCommentRow: false, originalId: deal.id },
          {
            id: `${deal.id}-comment`,
            isCommentRow: true,
            originalId: deal.id,
            reference: deal.reference,
          },
        ])
      );

      handleCloseCommentModal();
    } else {
      console.error("No deal selected for commenting.");
      handleCloseCommentModal();
    }
  };

  const columnDefs = useMemo(
    () => [
      {
        headerName: "Type",
        field: "type",
        minWidth: 120,
        maxWidth: 180,
        cellClass: (params) =>
          params.data.isCommentRow
            ? "ag-cell-comment-row-placeholder"
            : "ag-master-cell",
        cellRenderer: (params) =>
          TypeCellRenderer({
            data: params.data,
            context: { handleShowHistoryModal },
          }),
      },
      {
        headerName: "Reference",
        field: "reference",
        minWidth: 150,
        maxWidth: 200,
        cellClass: (params) =>
          params.data.isCommentRow
            ? "ag-cell-comment-row-placeholder"
            : "cell-pre-line",
        cellRenderer: (params) =>
          params.data.isCommentRow ? "" : params.value,
      },
      {
        headerName: "Contrepartie",
        field: "contrepartie",
        minWidth: 120,
        maxWidth: 150,
        cellClass: (params) =>
          params.data.isCommentRow ? "ag-cell-comment-row-placeholder" : "",
        cellRenderer: (params) =>
          params.data.isCommentRow ? "" : params.value,
      },
      {
        headerName: "Date Valeur",
        field: "dateValeur",
        minWidth: 130,
        maxWidth: 150,
        cellClass: (params) =>
          params.data.isCommentRow ? "ag-cell-comment-row-placeholder" : "",
        cellRenderer: (params) =>
          params.data.isCommentRow ? "" : params.value,
      },
      {
        headerName: "Montant Achat / Commentaire",
        field: "montantAchat",
        minWidth: 250,
        colSpan: (params) => (params.data.isCommentRow ? 8 : 1), // Span for comment
        cellClass: (params) =>
          params.data.isCommentRow
            ? "comment-row-cell comment-text-cell"
            : "cell-text-right",
        cellRenderer: (params) => {
          if (params.data.isCommentRow) {
            const parentDeal = dealsData.find(
              (d) => d.id === params.data.originalId
            );
            return (
              <span className="comment-text">
                <strong>Commentaire:</strong>{" "}
                {parentDeal?.commentaire || (
                  <span className="text-muted">Aucun commentaire</span>
                )}
              </span>
            );
          }
          return params.value;
        },
      },
      // The following columns will be effectively hidden for comment rows due to colSpan
      {
        headerName: "Montant Vendu",
        field: "montantVendu",
        cellClass: "cell-text-right",
        minWidth: 150,
        maxWidth: 200,
        cellRenderer: (params) =>
          params.data.isCommentRow ? "" : params.value,
      },
      {
        headerName: "Cours client",
        field: "coursClient",
        cellClass: "cell-text-right",
        minWidth: 120,
        maxWidth: 150,
        cellRenderer: (params) =>
          params.data.isCommentRow ? "" : params.value,
      },
      {
        headerName: "Montant base Achat",
        field: "montantBaseAchat",
        cellClass: "cell-text-right",
        minWidth: 180,
        maxWidth: 220,
        cellRenderer: (params) =>
          params.data.isCommentRow ? "" : params.value,
      },
      {
        headerName: "Montant base Vendu",
        field: "montantBaseVendu",
        cellClass: "cell-text-right",
        minWidth: 180,
        maxWidth: 220,
        cellRenderer: (params) =>
          params.data.isCommentRow ? "" : params.value,
      },
      {
        headerName: "Cours base",
        field: "coursBase",
        cellClass: "cell-text-right",
        minWidth: 120,
        maxWidth: 150,
        cellRenderer: (params) =>
          params.data.isCommentRow ? "" : params.value,
      },
      {
        headerName: "Etat et Date import",
        field: "etatDateImport",
        cellClass: "cell-pre-line",
        minWidth: 180,
        maxWidth: 220,
        cellRenderer: (params) =>
          params.data.isCommentRow ? "" : params.value,
      },
      {
        headerName: "Actions",
        field: "id",
        minWidth: 150,
        pinned: "right",
        cellRenderer: (params) => {
          if (params.data.isCommentRow) return null;
          const dealId = params.data.originalId;

          const handleCommentClick = () => handleShowCommentModal(dealId);
          const handleDeleteClick = () =>
            alert(`Delete action for deal ID: ${dealId}`);
          const handleInvertClick = () =>
            alert(`Invert action for deal ID: ${dealId}`);
          const handleCancelClick = () =>
            alert(`Cancel action for deal ID: ${dealId}`);

          return (
            <Stack
              direction="horizontal"
              gap={2}
              className="justify-content-center h-100 align-items-center"
            >
              <Button
                variant="link"
                className="p-0"
                onClick={handleCommentClick}
                title="Commenter"
              >
                <PencilSquare className="action-icon-green" size={16} />
              </Button>
              <Button
                variant="link"
                className="p-0"
                onClick={handleDeleteClick}
                title="Supprimer"
              >
                <XOctagonFill className="action-icon-red" size={16} />
              </Button>
              <Button
                variant="link"
                className="p-0"
                onClick={handleInvertClick}
                title="Inversion"
              >
                <ArrowLeftRight className="action-icon-blue" size={16} />
              </Button>
              <Button
                variant="link"
                className="p-0"
                onClick={handleCancelClick}
                title="Annulation"
              >
                <ArrowRepeat className="action-icon-orange" size={16} />
              </Button>
            </Stack>
          );
        },
        sortable: false,
        filter: false,
      },
    ],
    [handleShowHistoryModal, handleShowCommentModal]
  ); // Dependencies for useMemo

  const defaultColDef = useMemo(
    () => ({
      sortable: true, // Enable sorting by default, can be overridden per column
      filter: true, // Enable filtering by default
      resizable: true,
    }),
    []
  );

  const onFirstDataRendered = useCallback((params) => {
    if (params.api) {
      params.api.sizeColumnsToFit();
    }
  }, []);

  const onGridSizeChanged = useCallback((params) => {
    if (!params.api || !document.querySelector(".ag-body-viewport")) {
      return;
    }
    const gridWidth = document.querySelector(".ag-body-viewport").clientWidth;
    const columnsToShow = [];
    const columnsToHide = [];
    let totalColsWidth = 0;
    const allColumns = params.api.getColumns();

    if (allColumns && allColumns.length > 0) {
      for (const column of allColumns) {
        const isPinned = column.getPinned && column.getPinned();
        if (isPinned) {
          columnsToShow.push(column.getColId());
          totalColsWidth += column.getActualWidth();
          continue;
        }
        totalColsWidth += column.getMinWidth() || 50; // Ensure minWidth is a number (default 50 if not set)
        if (totalColsWidth > gridWidth && !isPinned) {
          columnsToHide.push(column.getColId());
        } else {
          columnsToShow.push(column.getColId());
        }
      }
    }
    params.api.setColumnsVisible(columnsToShow, true);
    params.api.setColumnsVisible(columnsToHide, false);

    // Add a delay to ensure columns are visible before sizing
    setTimeout(() => {
      if (params.api) {
        params.api.sizeColumnsToFit();
      }
    }, 10);
  }, []);

  const getRowHeight = useCallback((params) => {
    return params.data && params.data.isCommentRow ? 40 : 50;
  }, []);

  const popover = (
    <Popover id="popover-legend" className="legend-popover">
      <Popover.Body className="px-3 pt-0">
        <ul>
          <li>CC: Change comptant</li>
          <li>TC: Change à terme - spot de couverture</li>
          <li>TT: Change à terme - partie terme</li>
          {/* Add other legend items */}
        </ul>
      </Popover.Body>
    </Popover>
  );

  // Add some basic CSS for comment row placeholders and action icons
  const customStyles = `
        .ag-cell-comment-row-placeholder {
            background-color: #fafafa !important; /* Lighter background for empty cells in comment row */
            font-size: 0.9em;
            color: #ccc;
        }
        .comment-row-cell.comment-text-cell {
            background-color: #eef2f7 !important; /* Slightly different background for the actual comment cell */
            padding-left: 10px !important;
            font-style: italic;
        }
        .comment-text strong {
            font-weight: bold;
            margin-right: 5px;
        }
        .action-icon-green { color: green; }
        .action-icon-red { color: red; }
        .action-icon-blue { color: #007bff; }
        .action-icon-orange { color: orange; }
        .cell-pre-line { white-space: pre-line; }
        .cell-text-right { text-align: right; }
        .grid-container {
            /* Consider setting a max-height if domLayout="autoHeight" makes it too tall */
            /* max-height: 70vh; */ 
        }
    `;

  return (
    <Container fluid className="mt-3">
      <style>{customStyles}</style>
      <Stack
        direction="horizontal"
        gap={3}
        className="mb-2 pb-2 border-bottom align-items-center justify-content-between flex-wrap"
      >
        <div className="d-flex align-items-center gap-2 mb-1 mb-md-0">
          <OverlayTrigger
            trigger={["hover", "focus"]}
            placement="bottom"
            overlay={popover}
          >
            <QuestionCircleFill className="help-cursor" />
          </OverlayTrigger>
          <span>Légende</span>
        </div>
        <div className="d-flex align-items-center gap-2 mb-1 mb-md-0">
          <ExclamationTriangleFill color="orange" />{" "}
          <span>
            Orphelins à commenter :{" "}
            <Badge bg="danger">{orphansToComment}</Badge>
          </span>
        </div>
        <div className="d-flex align-items-center gap-3 flex-wrap justify-content-center justify-content-md-end">
          {/* Legend for actions */}
        </div>
      </Stack>

      <p className="text-muted mb-2">Nombre de deals: {totalDeals}</p>

      <div
        className="ag-theme-alpine grid-container"
        style={{
          width: "100%",
          height: "auto" /* domLayout="autoHeight" will manage height */,
        }}
      >
        <AgGridReact
          ref={gridRef}
          rowData={rowData}
          columnDefs={columnDefs}
          defaultColDef={defaultColDef}
          domLayout="autoHeight"
          pagination={true}
          paginationPageSize={10}
          paginationPageSizeSelector={[10, 20, 50, 100]} // Fix for error #94, #95
          enableBrowserTooltips={true}
          rowSelection="single"
          context={{ handleShowHistoryModal }} // Pass only what's needed by cell renderers
          getRowHeight={getRowHeight}
          gridOptions={gridOptionsObject} // Pass your gridOptions with getRowStyle
          onGridSizeChanged={onGridSizeChanged}
          onFirstDataRendered={onFirstDataRendered}
          suppressColumnVirtualisation={true}
          suppressRowTransform={true}
        />
      </div>

      <Modal
        show={showHistoryModal}
        onHide={() => setShowHistoryModal(false)}
        size="lg"
        centered
      >
        <Modal.Header closeButton>
          <Modal.Title>
            Historique - Ref:{" "}
            <span className="cell-pre-line">{selectedDealReference}</span>
          </Modal.Title>
        </Modal.Header>
        <Modal.Body className="modal-history-content">
          {selectedDealHistory.length > 0 ? (
            <Table striped bordered hover size="sm">
              <thead>
                <tr>
                  <th>Action</th>
                  <th>Commentaire</th>
                  <th>Utilisateur</th>
                  <th>Date</th>
                </tr>
              </thead>
              <tbody>
                {selectedDealHistory.map((entry, idx) => (
                  <tr key={idx}>
                    <td>{entry.action}</td>
                    <td className="table-cell-wrap">{entry.commentaire}</td>
                    <td>{entry.utilisateur}</td>
                    <td>{entry.date}</td>
                  </tr>
                ))}
              </tbody>
            </Table>
          ) : (
            <p>Aucun historique disponible.</p>
          )}
        </Modal.Body>
        <Modal.Footer>
          <Button
            variant="secondary"
            onClick={() => setShowHistoryModal(false)}
          >
            Fermer
          </Button>
        </Modal.Footer>
      </Modal>

      <Modal show={showCommentModal} onHide={handleCloseCommentModal} centered>
        <Modal.Header closeButton>
          <Modal.Title>Commenter l'orphelin</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <p>Merci de saisir un commentaire :</p>
          <Form.Group controlId="commentTextArea">
            <Form.Label className="fw-bold">Commentaire :</Form.Label>
            <Form.Control
              as="textarea"
              rows={4}
              value={currentComment}
              onChange={handleCommentChange}
              maxLength={maxCommentLength}
              className="comment-textarea"
            />
            <Form.Text muted className="d-block text-end">
              {maxCommentLength - currentComment.length} restant(s)
            </Form.Text>
          </Form.Group>
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={handleCloseCommentModal}>
            Annuler
          </Button>
          <Button variant="primary" onClick={handleSaveComment}>
            Sauvegarder
          </Button>
        </Modal.Footer>
      </Modal>
    </Container>
  );
};

export default DealsTable;
