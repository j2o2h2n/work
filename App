
import React, { useState, useMemo } from "react";
import {
  AllCommunityModule,
  ModuleRegistry,
  themeAlpine,
  Theme,
  ColDef,
} from "ag-grid-community";
import { AgGridReact } from "ag-grid-react";
import { Container, Badge, Stack, Button, Modal, Form, Table } from "react-bootstrap";
import {
  QuestionCircleFill,
  ExclamationTriangleFill,
  CheckCircleFill,
  XCircleFill,
  PencilSquare,
  XOctagonFill,
  ArrowRepeat,
  ArrowLeftRight,
  InfoCircleFill,
} from "react-bootstrap-icons";
import "bootstrap/dist/css/bootstrap.min.css";
import "ag-grid-community/styles/ag-grid.css"; // core styles only

// Register AG Grid modules
ModuleRegistry.registerModules([AllCommunityModule]);

// Customized Alpine theme via Theming API
const myTheme: Theme = themeAlpine.withParams({
  backgroundColor: "rgb(8, 7, 2)",
  foregroundColor: "rgb(126, 46, 132)",
  headerTextColor: "rgb(204, 245, 172)",
  headerBackgroundColor: "rgb(148, 11, 73)",
  oddRowBackgroundColor: "rgba(0, 0, 0, 0.03)",
  headerColumnResizeHandleColor: "rgb(159, 26, 168)",
});

// --- Data Types ---
interface DealHistoryEntry {
  action: string;
  commentaire: string;
  utilisateur: string;
  date: string;
}

interface Deal {
  id: string | number;
  type: string;
  reference: string;
  contrepartie?: string;
  dateValeur?: string;
  montantAchat?: string;
  montantVendu?: string;
  coursClient?: string;
  montantBaseAchat?: string;
  montantBaseVendu?: string;
  coursBase?: string;
  etatDateImport?: string;
  commentaire?: string | null;
  history?: DealHistoryEntry[];
  commentRow?: boolean; // flag for full-width comment rows
}

// --- Sample Data ---
const sampleHistory: DealHistoryEntry[] = [
  { action: "MODIF_COMMENTAIRE", commentaire: "", utilisateur: "MEHABOO1", date: "23 Apr 2025 09:05:22" },
  { action: "ANNULE_SUPPRESSION", commentaire: "test", utilisateur: "MEHABOO1", date: "19 Feb 2025 05:20:15" },
];

const dealsData: Deal[] = [
  {
    id: "3613012",
    type: "CC F A",
    reference: "3613012",
    contrepartie: "70788432",
    dateValeur: "28 Feb 2024",
    montantAchat: "8.63 EUR",
    montantVendu: "15.00 NZD N",
    coursClient: "1.7378180",
    montantBaseAchat: "8.63",
    montantBaseVendu: "15.00",
    coursBase: "1.7378180",
    etatDateImport: "27/03/24\n0 - \n[1827565]",
    commentaire: null,
    history: sampleHistory,
  },
  {
    id: "3613059",
    type: "CC F A",
    reference: "3613059",
    contrepartie: "70788432",
    dateValeur: "28 Feb 2024",
    montantAchat: "84,380.21 GBP N",
    montantVendu: "94,277.38 CHF",
    coursClient: "1.1172926",
    montantBaseAchat: "84,380.21",
    montantBaseVendu: "94,277.38",
    coursBase: "1.1172926",
    etatDateImport: "27/03/24\n0 - \n[1827627]",
    commentaire: '2024.06.20: QUITUS team advised: "Team is still busy with the Java upgrade and multiple vulnerabilities till Sept". Email TS: Tuesday, 11 June, 2024 11:30 AM',
    history: [],
  },
  {
    id: "SC076523",
    type: "TC F A",
    reference: "3706694\nSC076523",
    contrepartie: "",
    dateValeur: "02 Sep 2024",
    montantAchat: "2,850.12 EUR",
    montantVendu: "2,400.92 GBP N",
    coursClient: "0.8423938",
    montantBaseAchat: "2,850.12",
    montantBaseVendu: "2,400.92",
    coursBase: "0.8423938",
    etatDateImport: "03/09/24\n5 - \n[1907358]",
    commentaire: '2024.09.18: reminder sent / 2024.09.19: return of BO amount 681.03 will be spent at the end of the month on their usual process',
    history: sampleHistory.slice(1),
  },
  {
    id: "3706695",
    type: "TT F A",
    reference: "3706695",
    contrepartie: "",
    dateValeur: "02 Sep 2024",
    montantAchat: "5,887,000.00 GBP N",
    montantVendu: "6,988,418.01 EUR",
    coursClient: "0.8423938",
    montantBaseAchat: "5,887,000.00",
    montantBaseVendu: "6,988,418.01",
    coursBase: "0.8423938",
    etatDateImport: "03/09/24\n0 - \n[1907365]",
    commentaire: null,
    history: [],
  },
  {
    id: "3710039",
    type: "CC F M",
    reference: "3710039",
    contrepartie: "70491515",
    dateValeur: "11 Sep 2024",
    montantAchat: "366.24 DKK N",
    montantVendu: "49.08 EUR",
    coursClient: "7.4621000",
    montantBaseAchat: "366.24",
    montantBaseVendu: "49.08",
    coursBase: "7.4621000",
    etatDateImport: "09/09/24\n5 - \n[1910243]",
    commentaire: '2024.09.10: FO deal in VAL status...',
    history: [],
  },
];

// --- Cell Renderer Context ---
interface CellRendererContext {
  showHistory: (deal: Deal) => void;
  showComment: (id: Deal["id"]) => void;
}

// Render the "Type" column with history button
const TypeRenderer: React.FC<{ data: Deal; context: CellRendererContext }> = ({ data, context }) => {
  const parts = data.type.split(" ");
  if (parts.length === 3) {
    return (
      <Stack direction="horizontal" gap={1} className="align-items-center">
        <span>{parts[0]}</span>
        <span>{parts[1]}</span>
        <Button
          variant="link"
          size="sm"
          className="p-0 mx-1 text-primary"
          onClick={() => context.showHistory(data)}
          title={`Show history for ${data.reference}`}
        >
          <InfoCircleFill size={14} />
        </Button>
        <span>{parts[2]}</span>
      </Stack>
    );
  }
  return <span style={{ whiteSpace: "pre-line" }}>{data.type}</span>;
};

// Render the actions column
const ActionsRenderer: React.FC<{ data: Deal; context: CellRendererContext }> = ({ data, context }) => (
  <Stack direction="horizontal" gap={2} className="justify-content-center">
    <Button
      variant="link"
      className="p-0"
      onClick={() => context.showComment(data.id)}
      title="Commenter l'orphelin"
    >
      <CheckCircleFill color="green" style={{ cursor: "pointer" }} />
    </Button>
    <Button variant="link" className="p-0" title="Supprimer l'orphelin">
      <XCircleFill color="red" style={{ cursor: "pointer" }} />
    </Button>
  </Stack>
);

// Full-width renderer for comment rows
const CommentRenderer: React.FC<{ data: Deal }> = ({ data }) => (
  <div style={{ padding: '0.5rem' }}>
    <strong>Commentaire:</strong> {data.commentaire}
  </div>
);

// --- Main DealsTable Component ---
const DealsTable: React.FC = () => {
  // Modal state
  const [historyModal, setHistoryModal] = useState(false);
  const [currentHistory, setCurrentHistory] = useState<DealHistoryEntry[]>([]);
  const [currentRef, setCurrentRef] = useState("");

  const [commentModal, setCommentModal] = useState(false);
  const [commentDealId, setCommentDealId] = useState<Deal['id'] | null>(null);
  const [commentText, setCommentText] = useState("");

  // Handlers
  const openHistory = (deal: Deal) => {
    setCurrentHistory(deal.history ?? []);
    setCurrentRef(deal.reference);
    setHistoryModal(true);
  };
  const closeHistory = () => setHistoryModal(false);

  const openComment = (id: Deal['id']) => {
    setCommentDealId(id);
    setCommentModal(true);
  };
  const closeComment = () => {
    setCommentModal(false);
    setCommentText("");
    setCommentDealId(null);
  };
  const saveComment = () => {
    console.log(`Saving comment for deal ${commentDealId}: "${commentText}"`);
    closeComment();
  };

  // Transform data to insert comment rows
  const rowData = useMemo<Deal[]>(() => {
    return dealsData.flatMap(deal => {
      if (deal.commentaire) {
        return [deal, { ...deal, commentRow: true }];
      }
      return [deal];
    });
  }, []);

  // Column definitions
  const columnDefs = useMemo<ColDef[]>(() => [
    { headerName: "Type", field: "type", cellRenderer: "typeRenderer" },
    { headerName: "Reference", field: "reference", wrapText: true, autoHeight: true },
    { headerName: "Contrepartie", field: "contrepartie" },
    { headerName: "Date de Valeur", field: "dateValeur" },
    { headerName: "Montant Achat", field: "montantAchat", cellClass: "text-end" },
    { headerName: "Montant Vendu", field: "montantVendu", cellClass: "text-end" },
    { headerName: "Cours client", field: "coursClient", cellClass: "text-end" },
    { headerName: "Montant base Achat", field: "montantBaseAchat", cellClass: "text-end" },
    { headerName: "Montant base Vendu", field: "montantBaseVendu", cellClass: "text-end" },
    { headerName: "Cours base", field: "coursBase", cellClass: "text-end" },
    { headerName: "Etat & Date import", field: "etatDateImport", wrapText: true, autoHeight: true },
    { headerName: "Actions", field: "id", cellRenderer: "actionsRenderer", autoHeight: true },
  ], []);

  // Framework components
  const components = useMemo(() => ({
    typeRenderer: TypeRenderer,
    actionsRenderer: ActionsRenderer,
    commentRenderer: CommentRenderer,
  }), []);

  return (
    <Container fluid className="mt-3">
      {/* Toolbar & Legend */}
      <Stack direction="horizontal" gap={3} className="mb-2 pb-2 border-bottom align-items-center justify-content-between flex-wrap">
        <div className="d-flex align-items-center gap-2"><QuestionCircleFill /> Légende</div>
        <div className="d-flex align-items-center gap-2"><ExclamationTriangleFill color="orange" />
          <span>Orphelins à commenter: <Badge bg="danger">{dealsData.filter(d => !d.commentaire).length}</Badge></span>
        </div>
        <div className="d-flex align-items-center gap-3 flex-wrap justify-content-center justify-content-md-end">
          <Button variant="link" className="text-secondary p-0 d-flex align-items-center gap-1"><PencilSquare /> Saisie d'un commentaire</Button>
          <Button variant="link" className="text-secondary p-0 d-flex align-items-center gap-1"><XOctagonFill /> Suppression de l'orphelin</Button>
          <Button variant="link" className="text-secondary p-0 d-flex align-items-center gap-1"><ArrowRepeat /> Annulation de la suppression</Button>
          <Button variant="link" className="text-secondary p-0 d-flex align-items-center gap-1"><ArrowLeftRight /> Inversion du sens des CC</Button>
        </div>
      </Stack>
      <p className="text-muted mb-2">Nombre de deals: {dealsData.length}</p>

      {/* AG Grid with full-width comment rows */}
      <div style={{ width: "100%", height: "600px" }}>
        <AgGridReact
          rowData={rowData}
          columnDefs={columnDefs}
          defaultColDef={{ flex: 1, sortable: true, resizable: true }}
          components={components}
          context={{ showHistory: openHistory, showComment: openComment }}
          isFullWidthRow={params => !!params.rowNode?.data.commentRow}
          fullWidthCellRenderer="commentRenderer"
          getRowHeight={params => params.data.commentRow ? 60 : 25}
          theme={myTheme}
          animateRows
          pagination
          paginationPageSize={10}
        />
      </div>

      {/* History Modal */}
      <Modal show={historyModal} onHide={closeHistory} size="lg" centered>
        <Modal.Header closeButton><Modal.Title>Historique - {currentRef}</Modal.Title></Modal.Header>
        <Modal.Body style={{ maxHeight: '60vh', overflowY: 'auto' }}>
          {currentHistory.length > 0 ? (
            <Table striped bordered hover size="sm">
              <thead>
                <tr><th>Action</th><th>Commentaire</th><th>Utilisateur</th><th>Date</th></tr>
              </thead>
              <tbody>
                {currentHistory.map((entry, idx) => (
                  <tr key={idx}>
                    <td>{entry.action}</td>
                    <td style={{ whiteSpace: 'pre-wrap', wordBreak: 'break-word' }}>{entry.commentaire}</td>
                    <td>{entry.utilisateur}</td>
                    <td>{entry.date}</td>
                  </tr>
                ))}
              </tbody>
            </Table>
          ) : (
            <p>Aucun historique disponible pour cette référence.</p>
          )}
        </Modal.Body>
        <Modal.Footer><Button variant="secondary" onClick={closeHistory}>Fermer</Button></Modal.Footer>
      </Modal>

      {/* Comment Modal */}
      <Modal show={commentModal} onHide={closeComment} centered>
        <Modal.Header closeButton><Modal.Title>Commenter l'orphelin</Modal.Title></Modal.Header>
        <Modal.Body>
          <Form.Group controlId="commentTextArea">
            <Form.Label>Commentaire :</Form.Label>
            <Form.Control as="textarea" rows={4} value={commentText} onChange={e => setCommentText(e.target.value)} maxLength={254} />
            <Form.Text muted className="text-end">{254 - commentText.length} restant(s)</Form.Text>
          </Form.Group>
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={closeComment}>Annuler</Button>
          <Button variant="primary" onClick={saveComment}>Sauvegarder</Button>
        </Modal.Footer>
      </Modal>
    </Container>
  );
};

export default DealsTable;
