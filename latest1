import React, { useState, useMemo, useCallback, useRef } from 'react';
import { Container, Badge, Stack, Button, Modal, Form, Table, Popover, OverlayTrigger } from 'react-bootstrap';
import {
    QuestionCircleFill,
    ExclamationTriangleFill,
    PencilSquare,
    XOctagonFill,
    ArrowRepeat,
    ArrowLeftRight,
    InfoCircleFill
} from 'react-bootstrap-icons';
import 'bootstrap/dist/css/bootstrap.min.css';
import './App.css';
// --- AgGrid Imports ---
import { AgGridReact } from 'ag-grid-react';
import "ag-grid-community/styles/ag-grid.css";
import "ag-grid-community/styles/ag-theme-alpine.css";
import { ModuleRegistry } from 'ag-grid-community';
import { 
    ClientSideRowModelModule,
    // ColumnApiModule,
    ColumnAutoSizeModule,
    // ValidationModule
} from 'ag-grid-community';

ModuleRegistry.registerModules([
    ClientSideRowModelModule,
    // ColumnApiModule,
    ColumnAutoSizeModule,
    // ValidationModule
]);
// --- Sample Data (for demonstration) ---
const sampleHistory = [
    { action: 'MODIF_COMMENTAIRE', commentaire: '', utilisateur: 'MEHABOO1', date: '23 Apr 2025 09:05:22' },
    { action: 'MODIF_COMMENTAIRE', commentaire: '', utilisateur: 'MEHABOO1', date: '23 Apr 2025 09:05:22' },
    { action: 'MODIF_COMMENTAIRE', commentaire: '', utilisateur: 'MEHABOO1', date: '23 Apr 2025 09:05:22' },
    { action: 'MODIF_COMMENTAIRE', commentaire: '', utilisateur: 'MEHABOO1', date: '23 Apr 2025 09:05:21' },
    { action: 'MODIF_COMMENTAIRE', commentaire: '', utilisateur: 'MEHABOO1', date: '22 Apr 2025 01:15:11' },
    { action: 'ANNULE_SUPPRESSION', commentaire: 'test', utilisateur: 'MEHABOO1', date: '19 Feb 2025 05:20:15' },
    { action: 'SUPPRESSION', commentaire: 'Test deletion', utilisateur: 'MEHABOO1', date: '18 Feb 2025 08:20:01' },
    { action: 'MODIF_COMMENTAIRE', commentaire: '2024.06.20: QUITUS team advised: "Team is still busy with the Java upgrade..."', utilisateur: 'MEHABOO1', date: '18 Feb 2025 07:53:15' },
    { action: 'MODIF_COMMENTAIRE', commentaire: 'Another comment update...', utilisateur: 'ABBONDA1', date: '20 Jun 2024 10:57:05' },
];
const dealsData = [
    { id: '3613012', type: 'CC F A', reference: '3613012', contrepartie: '70788432', dateValeur: '28 Feb 2024', montantAchat: '8.63 EUR', montantVendu: '15.00 NZD N', coursClient: '1.7378180', montantBaseAchat: '8.63', montantBaseVendu: '15.00', coursBase: '1.7378180', etatDateImport: '27/03/24\n0 - \n[1827565]', commentaire: null, history: sampleHistory },
    { id: '3613059', type: 'CC F A', reference: '3613059', contrepartie: '70788432', dateValeur: '28 Feb 2024', montantAchat: '84,380.21 GBP N', montantVendu: '94,277.38 CHF', coursClient: '1.1172926', montantBaseAchat: '84,380.21', montantBaseVendu: '94,277.38', coursBase: '1.1172926', etatDateImport: '27/03/24\n0 - \n[1827627]', commentaire: '2024.06.20: QUITUS team advised: "Team is still busy with the Java upgrade and multiple vulnerabilities till Sept". Email TS: Tuesday, 11 June, 2024 11:30 AM', history: [] },
    { id: 'SC076523', type: 'TC F A', reference: '3706694\nSC076523', contrepartie: '', dateValeur: '02 Sep 2024', montantAchat: '2,850.12 EUR', montantVendu: '2,400.92 GBP N', coursClient: '0.8423938', montantBaseAchat: '2,850.12', montantBaseVendu: '2,400.92', coursBase: '0.8423938', etatDateImport: '03/09/24\n5 - \n[1907358]', commentaire: '2024.09.18: reminder sent / 2024.09.19: return of BO amount 681.03 will be spent at the end of the month on their usual process', history: sampleHistory.slice(5, 8) },
    { id: '3706695', type: 'TT F A', reference: '3706695', contrepartie: '', dateValeur: '02 Sep 2024', montantAchat: '5,887,000.00 GBP N', montantVendu: '6,988,418.01 EUR', coursClient: '0.8423938', montantBaseAchat: '5,887,000.00', montantBaseVendu: '6,988,418.01', coursBase: '0.8423938', etatDateImport: '03/09/24\n0 - \n[1907365]', commentaire: '2024.09.18: reminder sent / 2024.09.19: return of BO amount 681.03 will be spent at the end of the month on their usual process', history: [] },
    { id: '3710039', type: 'CC F M', reference: '3710039', contrepartie: '70491515', dateValeur: '11 Sep 2024', montantAchat: '366.24 DKK N', montantVendu: '49.08 EUR', coursClient: '7.4621000', montantBaseAchat: '366.24', montantBaseVendu: '49.08', coursBase: '7.4621000', etatDateImport: '09/09/24\n5 - \n[1910243]', commentaire: '2024.09.10: FO deal in VAL status...', history: [] },
    { id: '3710040', type: 'CC F M', reference: '3710040', contrepartie: '70491515', dateValeur: '11 Sep 2024', montantAchat: '229.94 NOK N', montantVendu: '19.22 EUR', coursClient: '11.9658000', montantBaseAchat: '229.94', montantBaseVendu: '19.22', coursBase: '11.9658000', etatDateImport: '09/09/24\n5 - \n[1910129]', commentaire: '2024.09.10: FO deal in VAL status...', history: [] },
    { id: 'CC149589', type: 'CC F A', reference: '3712941\nCC149589', contrepartie: '70788432', dateValeur: '18 Sep 2024', montantAchat: '4,499.44 EUR', montantVendu: '5,000.00 USD N', coursClient: '1.1112500', montantBaseAchat: '4,499.44', montantBaseVendu: '5,000.00', coursBase: '1.1112500', etatDateImport: '18/09/24\n5 - \n[1914715]', commentaire: '2024.09.19: FO/BO FX induits...', history: [] },
];
const gridOptions = {
    getRowStyle: params => {
        if (params.node.rowIndex % 4 < 2) {
            return { 'background': '#f2f2f2' }; // Light grey for even rows
        } else {
            return { 'background': '#ffffff' }; // White for odd rows
        }
    },
}
/**
* Custom cell renderer for the 'Type' column.
* Shows the Info icon and handles the history modal.
*/
const TypeCellRenderer = ({ data, context }) => {
    const parts = data.type.split(' ');
    if (parts.length === 3) {
        return (
            <Stack direction="horizontal" gap={1} className="align-items-center h-100">
                <span>{parts[0]}</span>
                <span>{parts[1]}</span>
                <Button
                    variant="link"
                    size="sm"
                    className="p-0 mx-1 text-primary"
                    onClick={() => context.handleShowHistoryModal(data)}
                    title={`Show history for ${data.reference}`}
                    aria-label={`Show history for ${data.reference}`}
                >
                    <InfoCircleFill size={14} />
                </Button>
                <span>{parts[2]}</span>
            </Stack>
        );
    }
    return <span className="cell-pre-line">{data.type}</span>;
};
/**
 * Main DealsTable component.
 * Handles AgGrid setup, modals, and comment logic.
 */
const DealsTable = () => {
    // --- Constants ---
    const totalDeals = 28;
    const orphansToComment = 6;
    const maxCommentLength = 254;

    // --- State for modals and comment input ---
    const [showHistoryModal, setShowHistoryModal] = useState(false);
    const [selectedDealHistory, setSelectedDealHistory] = useState([]);
    const [selectedDealReference, setSelectedDealReference] = useState('');
    const [showCommentModal, setShowCommentModal] = useState(false);
    const [commentingDealId, setCommentingDealId] = useState(null);
    const [commentText, setCommentText] = useState('');
    const [showPopover, setShowPopover] = useState(false);

    // --- Modal Handlers ---
    // Show history modal for a deal
    const handleShowHistoryModal = useCallback((deal) => {
        setSelectedDealHistory(deal.history || []);
        setSelectedDealReference(deal.reference.replace(/\n/g, ' '));
        setShowHistoryModal(true);
    }, []);
    // Show comment modal for a deal
    const handleShowCommentModal = useCallback((dealId) => {
        setCommentingDealId(dealId);
        setShowCommentModal(true);
    }, []);
    // Close comment modal and reset input
    const handleCloseCommentModal = () => {
        setShowCommentModal(false);
        setCommentText('');
        setCommentingDealId(null);
    };
    // Handle comment textarea change
    const handleCommentChange = (event) => {
        if (event.target.value.length <= maxCommentLength) {
            setCommentText(event.target.value);
        }
    };
    // Save comment (stub: implement actual save logic as needed)
    const handleSaveComment = () => {
        if (commentingDealId) {
            console.log(`Saving comment for deal ${commentingDealId}: "${commentText}"`);
            handleCloseCommentModal();
        } else {
            console.error("No deal selected for commenting.");
            handleCloseCommentModal();
        }
    };

    /**
     * Expand dealsData so each deal is followed by a comment row.
     * The comment row starts from 'Montant Achat' column and spans to the end.
     */
    const expandedDealsData = useMemo(() => {
        return dealsData.flatMap(deal => [
            { ...deal, isCommentRow: false },
            {
                id: `${deal.id}-comment`,
                isCommentRow: true,
                commentaire: deal.commentaire,
                reference: deal.reference,
            }
        ]);
    }, []);

    /**
     * AgGrid column definitions.
     * For comment rows, only the 'Montant Achat' column renders the comment (with colSpan), others are empty.
     */
    const columnDefs = useMemo(() => [
        {
            headerName: 'Type',
            field: 'type',
            minWidth: 100,
            flex: 1,
            cellClass: (params) => params.data.isCommentRow ? 'comment-row' : 'ag-master-cell',
            colSpan: (params) => params.data.isCommentRow ? 1 : 1,
            cellRenderer: (params) => params.data.isCommentRow ? null : TypeCellRenderer({ data: params.data, context: { handleShowHistoryModal } }),
        },
        {
            headerName: 'Reference',
            field: 'reference',
            minWidth: 100,
            flex: 1,
            cellClass: 'cell-pre-line',
            colSpan: (params) => params.data.isCommentRow ? 1 : 1,
            cellRenderer: (params) => params.data.isCommentRow ? null : params.value,
        },
        {
            headerName: 'Contrepartie',
            field: 'contrepartie',
            minWidth: 100,
            flex: 1,
            colSpan: (params) => params.data.isCommentRow ? 1 : 1,
            cellRenderer: (params) => params.data.isCommentRow ? null : params.value,
        },
        {
            headerName: 'Date de Valeur',
            field: 'dateValeur',
            minWidth: 100,
            flex: 1,
            colSpan: (params) => params.data.isCommentRow ? 1 : 1,
            cellRenderer: (params) => params.data.isCommentRow ? null : params.value,
        },
        {
            headerName: 'Montant Achat',
            field: 'montantAchat',
            cellClass: 'cell-text-right',
            minWidth: 100,
            flex: 1,
            colSpan: (params) => params.data.isCommentRow ? 8 : 1,
            cellRenderer: (params) => {
                if (params.data.isCommentRow) {
                    return (
                        <span className="comment-text">
                            <strong>Commentaire:</strong> {params.data.commentaire || <span className="text-muted">Aucun commentaire</span>}
                        </span>
                    );
                }
                return params.value;
            }
        },
        {
            headerName: 'Montant Vendu',
            field: 'montantVendu',
            cellClass: 'cell-text-right',
            minWidth: 100,
            flex: 1,
            colSpan: (params) => params.data.isCommentRow ? 1 : 1,
            cellRenderer: (params) => params.data.isCommentRow ? null : params.value,
        },
        {
            headerName: 'Cours client',
            field: 'coursClient',
            cellClass: 'cell-text-right',
            minWidth: 100,
            flex: 1,
            colSpan: (params) => params.data.isCommentRow ? 1 : 1,
            cellRenderer: (params) => params.data.isCommentRow ? null : params.value,
        },
        {
            headerName: 'Montant de base Achat',
            field: 'montantBaseAchat',
            cellClass: 'cell-text-right',
            minWidth: 100,
            flex: 1,
            colSpan: (params) => params.data.isCommentRow ? 1 : 1,
            cellRenderer: (params) => params.data.isCommentRow ? null : params.value,
        },
        {
            headerName: 'Montant de base Vendu',
            field: 'montantBaseVendu',
            cellClass: 'cell-text-right',
            minWidth: 100,
            flex: 1,
            colSpan: (params) => params.data.isCommentRow ? 1 : 1,
            cellRenderer: (params) => params.data.isCommentRow ? null : params.value,
        },
        {
            headerName: 'Cours base',
            field: 'coursBase',
            cellClass: 'cell-text-right',
            minWidth: 100,
            flex: 1,
            colSpan: (params) => params.data.isCommentRow ? 1 : 1,
            cellRenderer: (params) => params.data.isCommentRow ? null : params.value,
        },
        {
            headerName: 'Etat et Date d\'import',
            field: 'etatDateImport',
            cellClass: 'cell-pre-line',
            minWidth: 100,
            flex: 1,
            colSpan: (params) => params.data.isCommentRow ? 1 : 1,
            cellRenderer: (params) => params.data.isCommentRow ? null : params.value,
        },
        {
            headerName: 'Actions',
            field: 'id',
            minWidth: 100,
            flex: 1,
            cellRenderer: (params) => {
                if (params.data.isCommentRow) return null;
                // Render action buttons for main rows only
                const data = params.data;
                const context = params.context;
                const handleCommentClick = () => {
                    context.handleShowCommentModal(data.id);
                };
                const handleDeleteClick = () => {
                    console.log("Delete clicked for deal ID:", data.id);
                    alert(`Delete action triggered for deal ID: ${data.id}. Implement actual logic.`);
                };

                const handleInvertClick = () => {
                    console.log("Invert clicked for deal ID:", data.id);
                    alert(`Invert action triggered for deal ID: ${data.id}. Implement actual logic.`);
                };
                const handleCancelClick = () => {
                    console.log("Cancel clicked for deal ID:", data.id);
                    alert(`Cancel action triggered for deal ID: ${data.id}. Implement actual logic.`);
                };


                return (
                    <Stack direction="horizontal" gap={2} className="justify-content-center h-100 align-items-center">
                        <Button
                            variant="link"
                            className="p-0"
                            onClick={handleCommentClick}
                            title="Commenter l'orphelin"
                            aria-label="Commenter l'orphelin"
                        >
                            <PencilSquare className="action-icon action-icon-green" size={16} />
                        </Button>
                        <Button
                            variant="link"
                            className="p-0"
                            onClick={handleDeleteClick}
                            title="Supprimer l'orphelin"
                            aria-label="Supprimer l'orphelin"
                        >
                            <XOctagonFill className="action-icon action-icon-red" size={16} />
                        </Button>
                        <Button
                            variant="link"
                            className="p-0"
                            onClick={handleInvertClick} // Invert button click handler
                            title="Inversion du sens des CC"
                            aria-label="Inversion du sens des CC"
                        >
                            < ArrowLeftRight className="action-icon action-icon-blue" size={16} />
                        </Button >
                        <Button
                            variant="link"
                            className="p-0"
                            onClick={handleCancelClick} // Cancel button click handle
                            title="Annulation de la suppression"
                            aria-label="Annulation de la suppression"
                        >
                            < ArrowRepeat className="action-icon action-icon-orange" size={16} />
                        </Button >

                    </Stack >
                );
            },
            sortable: false,
            filter: false,
        }
    ], [handleShowHistoryModal]);

    // --- AgGrid Default Column Definition ---
    const defaultColDef = useMemo(() => ({
        sortable: false,
        filter: false,
        resizable: true,
        suppressSizeToFit: false,
        autoSize: true
    }), []);

    const autoGroupColumnDef = useMemo(() => ({
        minWidth: 100,
        flex: 1,
        suppressSizeToFit: false
    }), []);

    // const onFirstDataRendered = useCallback((params) => {
    //     params.api.sizeColumnsToFit();
    // }, []);

    // --- AgGrid context for cell renderers ---
    const gridContext = useMemo(() => ({
        handleShowHistoryModal,
        handleShowCommentModal
    }), [handleShowHistoryModal, handleShowCommentModal]);

    const gridRef = useRef();

    // const onGridSizeChanged = useCallback(
    //     (params) => {
    //         // get the current grids width
    //         const gridWidth = document.querySelector(".ag-body-viewport").clientWidth;
    //         // keep track of which columns to hide/show
    //         const columnsToShow = [];
    //         const columnsToHide = [];
    //         // iterate over all columns (visible or not) and work out
    //         // now many columns can fit (based on their minWidth)
    //         let totalColsWidth = 0;
    //         const allColumns = params.api.getColumns();
    //         if (allColumns && allColumns.length > 0) {
    //             for (let i = 0; i < allColumns.length; i++) {
    //                 const column = allColumns[i];
    //                 totalColsWidth += column.getMinWidth();
    //                 if (totalColsWidth > gridWidth) {
    //                     columnsToHide.push(column.getColId());
    //                 } else {
    //                     columnsToShow.push(column.getColId());
    //                 }
    //             }
    //         }
    //         // show/hide columns based on current grid width
    //         params.api.setColumnsVisible(columnsToShow, true);
    //         params.api.setColumnsVisible(columnsToHide, false);
    //         // wait until columns stopped moving and fill out
    //         // any available space to ensure there are no gaps
    //         window.setTimeout(() => {
    //             params.api.sizeColumnsToFit();
    //         }, 10);
    //     },
    //     []
    // );

    const popover = (
        <Popover id="popover" className="legend-popover">
            <Popover.Body className="px-3 pt-0">
                <ul>
                    <li>CC: Change comptant</li>
                    <li>TC: Change à terme - spot de couverture</li>
                    <li>TT: Change à terme - partie terme</li>
                    <li>SW: Swap de change - spot de couverture</li>
                    <li>GC: Ordre groupe - change comptant</li>
                    <li>GT: Ordre groupe - change à terme</li>
                    <li>TF: Transfert</li>
                    <li>N: Nominal saisie</li>
                </ul>
            </Popover.Body>
        </Popover>
    );


    // const gridStyle = useMemo(() => ({ height: "100%", width: "100%"}), []);

    // --- Render ---
    return (
        <Container fluid className="mt-3">
            {/* Toolbar and legend */}
            <Stack direction="horizontal" gap={3} className="mb-2 pb-2 border-bottom align-items-center justify-content-between flex-wrap">
                <div className="d-flex align-items-center gap-2 mb-1 mb-md-0">
                    <OverlayTrigger
                        trigger={['hover', 'focus']}
                        placement="bottom"
                        overlay={popover}
                    >
                        <QuestionCircleFill className="help-cursor" />
                    </OverlayTrigger>
                    <span>Légende</span>
                </div>
                <div className="d-flex align-items-center gap-2 mb-1 mb-md-0"><ExclamationTriangleFill color="orange" /> <span>Nombre d'orphelins restants à commenter : <Badge bg="danger">{orphansToComment}</Badge></span></div>
                <div className="d-flex align-items-center gap-3 flex-wrap justify-content-center justify-content-md-end">
                    <Button variant="link" className="text-decoration-none text-secondary p-0 d-flex align-items-center gap-1"><PencilSquare /> <span>Saisie d'un commentaire</span></Button>
                    <Button variant="link" className="text-decoration-none text-secondary p-0 d-flex align-items-center gap-1"><XOctagonFill /> <span>Suppression de l'orphelin</span></Button>
                    <Button variant="link" className="text-decoration-none text-secondary p-0 d-flex align-items-center gap-1"><ArrowRepeat /> <span>Annulation de la suppression</span></Button>
                    <Button variant="link" className="text-decoration-none text-secondary p-0 d-flex align-items-center gap-1"><ArrowLeftRight /> <span>Inversion du sens des CC</span></Button>
                </div>
            </Stack>

            {/* Info Line */}
            <p className="text-muted mb-2">Nombre de deals: {totalDeals}</p>

            {/* AgGrid Table */}
            <div className="ag-theme-alpine grid-container" style={{ width: '100%', height: '100%' }}>
                <AgGridReact
                    ref={gridRef}
                    rowData={expandedDealsData}
                    columnDefs={columnDefs}
                    defaultColDef={defaultColDef}
                    autoGroupColumnDef={autoGroupColumnDef}
                    domLayout="autoHeight"
                    pagination={true}
                    paginationPageSize={10}
                    enableBrowserTooltips={true}
                    rowSelection="single"
                    context={gridContext}
                    rowHeight={50}
                    theme={'legacy'}
                    gridOptions={gridOptions}
                    suppressHorizontalScroll={true}
                    suppressColumnVirtualisation={true}
                    suppressRowVirtualisation={true}
                />
            </div>


            {/* History Modal */}
            <Modal show={showHistoryModal} onHide={() => setShowHistoryModal(false)} size="lg" centered>
                <Modal.Header closeButton>
                    <Modal.Title>Historique - Ref: <span className="cell-pre-line">{selectedDealReference}</span></Modal.Title>
                </Modal.Header>
                <Modal.Body className="modal-history-content">
                    {selectedDealHistory.length > 0 ? (
                        <Table striped bordered hover size="sm">
                            <thead>
                                <tr>
                                    <th>Action</th>
                                    <th>Commentaire</th>
                                    <th>Utilisateur</th>
                                    <th>Date</th>
                                </tr>
                            </thead>
                            <tbody>
                                {selectedDealHistory.map((entry, idx) => (
                                    <tr key={idx}>
                                        <td>{entry.action}</td>
                                        <td className="table-cell-wrap">{entry.commentaire}</td>
                                        <td>{entry.utilisateur}</td>
                                        <td>{entry.date}</td>
                                    </tr>
                                ))}
                            </tbody>
                        </Table>
                    ) : (
                        <p>Aucun historique disponible pour cette référence.</p>
                    )}
                </Modal.Body>
                <Modal.Footer>
                    <Button variant="secondary" onClick={() => setShowHistoryModal(false)}>
                        Fermer
                    </Button>
                </Modal.Footer>
            </Modal>

            {/* Comment Modal */}
            <Modal show={showCommentModal} onHide={handleCloseCommentModal} centered>
                <Modal.Header closeButton>
                    <Modal.Title>Commenter l'orphelin</Modal.Title>
                </Modal.Header>
                <Modal.Body>
                    <p>Merci de saisir un commentaire pour l'action sélectionnée</p>
                    <Form.Group controlId="commentTextArea">
                        <Form.Label className="fw-bold">Commentaire :</Form.Label>
                        <Form.Control
                            as="textarea"
                            rows={4}
                            value={commentText}
                            onChange={handleCommentChange}
                            maxLength={maxCommentLength}
                            className="comment-textarea"
                        />
                        <Form.Text muted className="d-block text-end">
                            {maxCommentLength - commentText.length} restant(s)
                        </Form.Text>
                    </Form.Group>
                </Modal.Body>
                <Modal.Footer>
                    <Button variant="secondary" onClick={handleCloseCommentModal}>
                        Annuler
                    </Button>
                    <Button variant="primary" onClick={handleSaveComment}>
                        Sauvegarder
                    </Button>
                </Modal.Footer>
            </Modal>
        </Container>
    );
};

export default DealsTable;
