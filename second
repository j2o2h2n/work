import React, { useState, useMemo, useCallback } from 'react';
import { Container, Badge, Stack, Button, Modal, Form } from 'react-bootstrap';
import {
    QuestionCircleFill,
    ExclamationTriangleFill,
    CheckCircleFill,
    XCircleFill,
    PencilSquare,
    XOctagonFill,
    ArrowRepeat,
    ArrowLeftRight,
    InfoCircleFill
} from 'react-bootstrap-icons';
import 'bootstrap/dist/css/bootstrap.min.css';

// --- AgGrid ---
import { AgGridReact } from 'ag-grid-react';
import "ag-grid-community/styles/ag-grid.css"; // Core CSS
import "ag-grid-community/styles/ag-theme-alpine.css"; // Theme

// --- Sample History Data (Keep as is) ---
const sampleHistory = [
    { action: 'MODIF_COMMENTAIRE', commentaire: '', utilisateur: 'MEHABOO1', date: '23 Apr 2025 09:05:22' },
    { action: 'MODIF_COMMENTAIRE', commentaire: '', utilisateur: 'MEHABOO1', date: '23 Apr 2025 09:05:22' },
    { action: 'MODIF_COMMENTAIRE', commentaire: '', utilisateur: 'MEHABOO1', date: '23 Apr 2025 09:05:22' },
    { action: 'MODIF_COMMENTAIRE', commentaire: '', utilisateur: 'MEHABOO1', date: '23 Apr 2025 09:05:21' },
    { action: 'MODIF_COMMENTAIRE', commentaire: '', utilisateur: 'MEHABOO1', date: '22 Apr 2025 01:15:11' },
    { action: 'ANNULE_SUPPRESSION', commentaire: 'test', utilisateur: 'MEHABOO1', date: '19 Feb 2025 05:20:15' },
    { action: 'SUPPRESSION', commentaire: 'Test deletion', utilisateur: 'MEHABOO1', date: '18 Feb 2025 08:20:01' },
    { action: 'MODIF_COMMENTAIRE', commentaire: '2024.06.20: QUITUS team advised: "Team is still busy with the Java upgrade..."', utilisateur: 'MEHABOO1', date: '18 Feb 2025 07:53:15' },
    { action: 'MODIF_COMMENTAIRE', commentaire: 'Another comment update...', utilisateur: 'ABBONDA1', date: '20 Jun 2024 10:57:05' },
];

// --- Updated Sample Deals Data (Keep as is) ---
const dealsData = [
    { id: '3613012', type: 'CC F A', reference: '3613012', contrepartie: '70788432', dateValeur: '28 Feb 2024', montantAchat: '8.63 EUR', montantVendu: '15.00 NZD N', coursClient: '1.7378180', montantBaseAchat: '8.63', montantBaseVendu: '15.00', coursBase: '1.7378180', etatDateImport: '27/03/24\n0 - \n[1827565]', commentaire: null, history: sampleHistory },
    { id: '3613059', type: 'CC F A', reference: '3613059', contrepartie: '70788432', dateValeur: '28 Feb 2024', montantAchat: '84,380.21 GBP N', montantVendu: '94,277.38 CHF', coursClient: '1.1172926', montantBaseAchat: '84,380.21', montantBaseVendu: '94,277.38', coursBase: '1.1172926', etatDateImport: '27/03/24\n0 - \n[1827627]', commentaire: '2024.06.20: QUITUS team advised: "Team is still busy with the Java upgrade and multiple vulnerabilities till Sept". Email TS: Tuesday, 11 June, 2024 11:30 AM', history: [] },
    { id: 'SC076523', type: 'TC F A', reference: '3706694\nSC076523', contrepartie: '', dateValeur: '02 Sep 2024', montantAchat: '2,850.12 EUR', montantVendu: '2,400.92 GBP N', coursClient: '0.8423938', montantBaseAchat: '2,850.12', montantBaseVendu: '2,400.92', coursBase: '0.8423938', etatDateImport: '03/09/24\n5 - \n[1907358]', commentaire: '2024.09.18: reminder sent / 2024.09.19: return of BO amount 681.03 will be spent at the end of the month on their usual process', history: sampleHistory.slice(5, 8) },
    { id: '3706695', type: 'TT F A', reference: '3706695', contrepartie: '', dateValeur: '02 Sep 2024', montantAchat: '5,887,000.00 GBP N', montantVendu: '6,988,418.01 EUR', coursClient: '0.8423938', montantBaseAchat: '5,887,000.00', montantBaseVendu: '6,988,418.01', coursBase: '0.8423938', etatDateImport: '03/09/24\n0 - \n[1907365]', commentaire: '2024.09.18: reminder sent / 2024.09.19: return of BO amount 681.03 will be spent at the end of the month on their usual process', history: [] },
    { id: '3710039', type: 'CC F M', reference: '3710039', contrepartie: '70491515', dateValeur: '11 Sep 2024', montantAchat: '366.24 DKK N', montantVendu: '49.08 EUR', coursClient: '7.4621000', montantBaseAchat: '366.24', montantBaseVendu: '49.08', coursBase: '7.4621000', etatDateImport: '09/09/24\n5 - \n[1910243]', commentaire: '2024.09.10: FO deal in VAL status...', history: [] },
    { id: '3710040', type: 'CC F M', reference: '3710040', contrepartie: '70491515', dateValeur: '11 Sep 2024', montantAchat: '229.94 NOK N', montantVendu: '19.22 EUR', coursClient: '11.9658000', montantBaseAchat: '229.94', montantBaseVendu: '19.22', coursBase: '11.9658000', etatDateImport: '09/09/24\n5 - \n[1910129]', commentaire: '2024.09.10: FO deal in VAL status...', history: [] },
    { id: 'CC149589', type: 'CC F A', reference: '3712941\nCC149589', contrepartie: '70788432', dateValeur: '18 Sep 2024', montantAchat: '4,499.44 EUR', montantVendu: '5,000.00 USD N', coursClient: '1.1112500', montantBaseAchat: '4,499.44', montantBaseVendu: '5,000.00', coursBase: '1.1112500', etatDateImport: '18/09/24\n5 - \n[1914715]', commentaire: '2024.09.19: FO/BO FX induits...', history: [] },
];


// --- Custom Cell Renderer for the 'Type' column ---
const TypeCellRenderer = (props) => {
    const { data, context } = props; // data is the row data, context holds handlers
    const parts = data.type.split(' ');

    if (parts.length === 3) {
        return (
            <Stack direction="horizontal" gap={1} className="align-items-center h-100"> {/* Use h-100 for vertical align */}
                <span>{parts[0]}</span>
                <span>{parts[1]}</span>
                <Button
                    variant="link"
                    size="sm"
                    className="p-0 mx-1 text-primary"
                    onClick={() => context.handleShowHistoryModal(data)} // Use handler from context
                    title={`Show history for ${data.reference}`}
                    aria-label={`Show history for ${data.reference}`}
                >
                    <InfoCircleFill size={14} />
                </Button>
                <span>{parts[2]}</span>
            </Stack>
        );
    }
    // Fallback for types not matching the expected format
    return <span style={{ whiteSpace: 'pre-line' }}>{data.type}</span>;
};

// --- Custom Cell Renderer for the 'Actions' column ---
const ActionsCellRenderer = (props) => {
    const { data, context } = props; // data is the row data, context holds handlers

    const handleCommentClick = () => {
        context.handleShowCommentModal(data.id);
    }

    const handleDeleteClick = () => {
        // Add your delete logic here if needed
        console.log("Delete clicked for deal ID:", data.id);
        alert(`Delete action triggered for deal ID: ${data.id}. Implement actual logic.`);
    }

    return (
        <Stack direction="horizontal" gap={2} className="justify-content-center h-100 align-items-center">
            <Button
                variant="link"
                className="p-0"
                onClick={handleCommentClick}
                title="Commenter l'orphelin"
                aria-label="Commenter l'orphelin"
            >
                <CheckCircleFill color="green" style={{ cursor: 'pointer' }} size={16} />
            </Button>
            <Button
                variant="link"
                className="p-0"
                onClick={handleDeleteClick} // Add onClick handler for delete
                title="Supprimer l'orphelin"
                aria-label="Supprimer l'orphelin"
            >
                <XCircleFill color="red" style={{ cursor: 'pointer' }} size={16} />
            </Button>
        </Stack>
    );
}

// --- Custom Detail Cell Renderer for Comments ---
const CommentDetailCellRenderer = ({ data }) => {
    return (
        <div className="ag-details-row bg-info bg-opacity-10 p-2" style={{ boxSizing: 'border-box' }}> {/* Style similar to table-info */}
             <strong>Commentaire:</strong> {data.commentaire}
        </div>
    );
};


// --- Main Component ---
const DealsTable = () => {
    const totalDeals = 28;
    const orphansToComment = 6;
    const maxCommentLength = 254;

    // --- State for History Modal (Keep as is) ---
    const [showHistoryModal, setShowHistoryModal] = useState(false);
    const [selectedDealHistory, setSelectedDealHistory] = useState([]);
    const [selectedDealReference, setSelectedDealReference] = useState('');

    // --- State for Comment Modal (Keep as is) ---
    const [showCommentModal, setShowCommentModal] = useState(false);
    const [commentingDealId, setCommentingDealId] = useState(null);
    const [commentText, setCommentText] = useState('');

    // --- History Modal Handlers (Keep as is) ---
    const handleCloseHistoryModal = () => setShowHistoryModal(false);
    const handleShowHistoryModal = useCallback((deal) => { // Use useCallback
        setSelectedDealHistory(deal.history || []);
        // Handle potential multi-line reference for display
        setSelectedDealReference(deal.reference.replace(/\n/g, ' '));
        setShowHistoryModal(true);
    }, []); // Empty dependency array means this function is created once

    // --- Comment Modal Handlers (Keep as is) ---
    const handleCloseCommentModal = () => {
        setShowCommentModal(false);
        setCommentText('');
        setCommentingDealId(null);
    };

    const handleShowCommentModal = useCallback((dealId) => { // Use useCallback
        setCommentingDealId(dealId);
        // Optionally pre-fill comment if editing existing one (find deal and setCommentText)
        // const deal = dealsData.find(d => d.id === dealId);
        // setCommentText(deal?.commentaire || '');
        setShowCommentModal(true);
    }, []); // Empty dependency array

    const handleCommentChange = (event) => {
        if (event.target.value.length <= maxCommentLength) {
            setCommentText(event.target.value);
        }
    };

    const handleSaveComment = () => {
        if (commentingDealId) {
            console.log(`Saving comment for deal ${commentingDealId}: "${commentText}"`);
            // --- TODO: Implement actual saving logic here ---
            // Find the deal in dealsData, update its comment, maybe update state if dealsData is state
            // For now, just log and close
            handleCloseCommentModal();
        } else {
            console.error("No deal selected for commenting.");
            handleCloseCommentModal();
        }
    };

    // --- AgGrid Column Definitions ---
    const columnDefs = useMemo(() => [
        // Use 'cellRendererSelector' for the first column to handle master/detail expander
        {
            headerName: 'Type',
            field: 'type',
            cellRendererSelector: params => {
                 // Check if it's a group row (master/detail uses grouping internally)
                if (params.node.group) {
                    return undefined; // Use default group renderer
                }
                 // Check if it's a detail row
                if (params.node.detail) {
                     return undefined; // Let detail renderer handle it
                }
                // Otherwise, it's a normal data row, use our custom renderer
                return { component: TypeCellRenderer };
            },
            cellRendererParams: { // Pass handlers via context
                 context: { handleShowHistoryModal }
            },
            minWidth: 150,
            // Necessary for Master/Detail expander icon placement
            cellClass: 'ag-master-cell',
        },
        { headerName: 'Reference', field: 'reference', cellStyle: { whiteSpace: 'pre-line' }, minWidth: 120 },
        { headerName: 'Contrepartie', field: 'contrepartie', minWidth: 100 },
        { headerName: 'Date de Valeur', field: 'dateValeur', minWidth: 120 },
        { headerName: 'Montant Achat', field: 'montantAchat', cellStyle: { textAlign: 'right' }, minWidth: 150 },
        { headerName: 'Montant Vendu', field: 'montantVendu', cellStyle: { textAlign: 'right' }, minWidth: 150 },
        { headerName: 'Cours client', field: 'coursClient', cellStyle: { textAlign: 'right' }, minWidth: 120 },
        { headerName: 'Montant de base Achat', field: 'montantBaseAchat', cellStyle: { textAlign: 'right' }, minWidth: 150 },
        { headerName: 'Montant de base Vendu', field: 'montantBaseVendu', cellStyle: { textAlign: 'right' }, minWidth: 150 },
        { headerName: 'Cours base', field: 'coursBase', cellStyle: { textAlign: 'right' }, minWidth: 120 },
        { headerName: 'Etat et Date d\'import', field: 'etatDateImport', cellStyle: { whiteSpace: 'pre-line' }, minWidth: 120 },
        {
            headerName: 'Actions',
            field: 'id', // Can use any unique field
            cellRenderer: ActionsCellRenderer,
            cellRendererParams: { // Pass handlers via context
                 context: { handleShowCommentModal }
            },
            sortable: false,
            filter: false,
            minWidth: 100,
            cellStyle: { padding: 0 } // Remove padding for better button centering
        }
    ], [handleShowHistoryModal, handleShowCommentModal]); // Recalculate if handlers change

    // --- AgGrid Default Column Definition ---
    const defaultColDef = useMemo(() => ({
        sortable: true,
        filter: true,
        resizable: true,
        minWidth: 100,
        // flex: 1, // Uncomment to make columns auto-fill width
    }), []);

    // --- AgGrid Master/Detail Configuration ---
    const masterDetail = true;

    // Function to determine which rows should be expandable masters
    const isRowMaster = useMemo(() => {
        return (dataItem) => dataItem ? dataItem.commentaire && dataItem.commentaire.length > 0 : false;
    }, []);

    // Define the component for the detail row
    const detailCellRenderer = useMemo(() => CommentDetailCellRenderer, []);

    // --- AgGrid Grid Options ---
    // Pass handlers needed by cell renderers via context
    const gridContext = useMemo(() => ({
        handleShowHistoryModal,
        handleShowCommentModal
    }), [handleShowHistoryModal, handleShowCommentModal]);


    return (
        <Container fluid className="mt-3">
            {/* Top Toolbar Section (Keep as is) */}
            <Stack direction="horizontal" gap={3} className="mb-2 pb-2 border-bottom align-items-center justify-content-between flex-wrap">
              <div className="d-flex align-items-center gap-2 mb-1 mb-md-0"><QuestionCircleFill /> <span>Légende</span></div>
              <div className="d-flex align-items-center gap-2 mb-1 mb-md-0"><ExclamationTriangleFill color="orange" /> <span>Nombre d'orphelins restants à commenter : <Badge bg="danger">{orphansToComment}</Badge></span></div>
              <div className="d-flex align-items-center gap-3 flex-wrap justify-content-center justify-content-md-end">
                <Button variant="link" className="text-decoration-none text-secondary p-0 d-flex align-items-center gap-1"><PencilSquare /> <span>Saisie d'un commentaire</span></Button>
                <Button variant="link" className="text-decoration-none text-secondary p-0 d-flex align-items-center gap-1"><XOctagonFill /> <span>Suppression de l'orphelin</span></Button>
                <Button variant="link" className="text-decoration-none text-secondary p-0 d-flex align-items-center gap-1"><ArrowRepeat /> <span>Annulation de la suppression</span></Button>
                <Button variant="link" className="text-decoration-none text-secondary p-0 d-flex align-items-center gap-1"><ArrowLeftRight /> <span>Inversion du sens des CC</span></Button>
              </div>
            </Stack>

            {/* Info Line (Keep as is) */}
            <p className="text-muted mb-2">true Nombre de deals: {totalDeals}</p>

            {/* AgGrid Table */}
            <div className="ag-theme-alpine" style={{ height: '60vh', width: '100%' }}> {/* Adjust height as needed */}
                {/* Custom CSS to style the header like the original */}
                <style>{`
                    .ag-theme-alpine .ag-header {
                        background-color: #dc3545 !important; /* Bootstrap danger red */
                        color: white !important;
                        border-bottom: 1px solid #ae2a36; /* Darker red border */
                    }
                    .ag-theme-alpine .ag-header-cell-label {
                        color: white !important;
                        font-weight: bold;
                    }
                    .ag-theme-alpine .ag-header-cell::after, .ag-theme-alpine .ag-header-group-cell::after {
                         border-right: 1px solid rgba(255, 255, 255, 0.3); /* Lighter border between headers */
                    }
                    .ag-theme-alpine .ag-cell {
                         line-height: 1.5; /* Adjust for similar vertical padding to table-sm */
                         padding-top: 0.4rem;
                         padding-bottom: 0.4rem;
                    }
                     /* Ensure detail row doesn't have extra padding/borders causing misalignment */
                    .ag-theme-alpine .ag-details-row {
                        padding: 0 !important;
                        border: none !important;
                    }
                    .ag-theme-alpine .ag-details-row .ag-details-grid {
                        border: none !important; /* Remove border around the detail content if AgGrid adds one */
                    }
                     /* Style for the custom detail content div */
                     .ag-details-row.bg-info {
                        --bs-bg-opacity: 0.1; /* Match bootstrap bg-opacity */
                     }
                     /* Align master cell content vertically */
                     .ag-master-cell {
                       display: flex;
                       align-items: center;
                     }
                `}</style>
                <AgGridReact
                    rowData={dealsData}
                    columnDefs={columnDefs}
                    defaultColDef={defaultColDef}
                    domLayout='autoHeight' // Grid adjusts height to content
                    pagination={false} // Disable pagination, show all rows like original table
                    rowSelection='single' // Example selection mode
                    // Master Detail Config
                    masterDetail={masterDetail}
                    isRowMaster={isRowMaster}
                    detailCellRenderer={detailCellRenderer}
                    detailRowHeight={50} // Adjust height based on typical comment length
                    // Context for Cell Renderers
                    context={gridContext}
                     // Keep detail rows for better visual connection
                    keepDetailRows={true}
                    keepDetailRowsCount={2} // Keep last 2 opened detail rows
                />
            </div>

            {/* History Modal (Keep as is) */}
            <Modal show={showHistoryModal} onHide={handleCloseHistoryModal} size="lg" centered>
                <Modal.Header closeButton>
                    {/* Display potentially multi-line ref cleanly */}
                    <Modal.Title>Historique - Ref: <span style={{ whiteSpace: 'pre-line' }}>{selectedDealReference}</span></Modal.Title>
                </Modal.Header>
                 <Modal.Body style={{ maxHeight: '60vh', overflowY: 'auto' }}>
                    {selectedDealHistory.length > 0 ? (
                        <Table striped bordered hover size="sm"> {/* Keep react-bootstrap Table here */}
                            <thead>
                                <tr>
                                    <th>Action</th>
                                    <th>Commentaire</th>
                                    <th>Utilisateur</th>
                                    <th>Date</th>
                                </tr>
                            </thead>
                            <tbody>
                                {selectedDealHistory.map((entry, idx) => (
                                    <tr key={idx}>
                                        <td>{entry.action}</td>
                                        <td style={{ whiteSpace: 'pre-wrap', wordBreak: 'break-word' }}>
                                            {entry.commentaire}
                                        </td>
                                        <td>{entry.utilisateur}</td>
                                        <td>{entry.date}</td>
                                    </tr>
                                ))}
                            </tbody>
                        </Table>
                    ) : (
                        <p>Aucun historique disponible pour cette référence.</p>
                    )}
                </Modal.Body>
                <Modal.Footer>
                    <Button variant="secondary" onClick={handleCloseHistoryModal}>
                        Fermer
                    </Button>
                </Modal.Footer>
            </Modal>

            {/* Comment Modal (Keep as is) */}
            <Modal show={showCommentModal} onHide={handleCloseCommentModal} centered>
                <Modal.Header closeButton>
                    <Modal.Title>Commenter l'orphelin</Modal.Title>
                </Modal.Header>
                <Modal.Body>
                    <p>Merci de saisir un commentaire pour l'action sélectionnée</p>
                    <Form.Group controlId="commentTextArea">
                        <Form.Label className='fw-bold'>Commentaire :</Form.Label>
                        <Form.Control
                            as="textarea"
                            rows={4}
                            value={commentText}
                            onChange={handleCommentChange}
                            maxLength={maxCommentLength}
                            style={{ backgroundColor: '#f0f0d8' }}
                        />
                        <Form.Text muted className="d-block text-end">
                            {maxCommentLength - commentText.length} restant(s)
                        </Form.Text>
                    </Form.Group>
                </Modal.Body>
                <Modal.Footer>
                    <Button variant="secondary" onClick={handleCloseCommentModal}>
                        Annuler
                    </Button>
                    <Button variant="primary" onClick={handleSaveComment}>
                        Sauvegarder
                    </Button>
                </Modal.Footer>
            </Modal>

        </Container>
    );
};

export default DealsTable;
