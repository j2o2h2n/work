import React, { useState } from 'react'; // Keep useState
import { Container, Table, Badge, Stack, Button, Modal, Form } from 'react-bootstrap'; // Keep Modal and Form
import {
    QuestionCircleFill,
    ExclamationTriangleFill,
    CheckCircleFill,
    XCircleFill,
    PencilSquare,
    XOctagonFill,
    ArrowRepeat,
    ArrowLeftRight,
    InfoCircleFill
} from 'react-bootstrap-icons';
import 'bootstrap/dist/css/bootstrap.min.css';

// --- Sample History Data ---
const sampleHistory = [
    { action: 'MODIF_COMMENTAIRE', commentaire: '', utilisateur: 'MEHABOO1', date: '23 Apr 2025 09:05:22' },
    { action: 'MODIF_COMMENTAIRE', commentaire: '', utilisateur: 'MEHABOO1', date: '23 Apr 2025 09:05:22' },
    { action: 'MODIF_COMMENTAIRE', commentaire: '', utilisateur: 'MEHABOO1', date: '23 Apr 2025 09:05:22' },
    { action: 'MODIF_COMMENTAIRE', commentaire: '', utilisateur: 'MEHABOO1', date: '23 Apr 2025 09:05:21' },
    { action: 'MODIF_COMMENTAIRE', commentaire: '', utilisateur: 'MEHABOO1', date: '22 Apr 2025 01:15:11' },
    { action: 'ANNULE_SUPPRESSION', commentaire: 'test', utilisateur: 'MEHABOO1', date: '19 Feb 2025 05:20:15' },
    { action: 'SUPPRESSION', commentaire: 'Test deletion', utilisateur: 'MEHABOO1', date: '18 Feb 2025 08:20:01' },
    { action: 'MODIF_COMMENTAIRE', commentaire: '2024.06.20: QUITUS team advised: "Team is still busy with the Java upgrade..."', utilisateur: 'MEHABOO1', date: '18 Feb 2025 07:53:15' },
    { action: 'MODIF_COMMENTAIRE', commentaire: 'Another comment update...', utilisateur: 'ABBONDA1', date: '20 Jun 2024 10:57:05' },
];

// --- Updated Sample Deals Data ---
const dealsData = [
    { id: '3613012', type: 'CC F A', reference: '3613012', contrepartie: '70788432', dateValeur: '28 Feb 2024', montantAchat: '8.63 EUR', montantVendu: '15.00 NZD N', coursClient: '1.7378180', montantBaseAchat: '8.63', montantBaseVendu: '15.00', coursBase: '1.7378180', etatDateImport: '27/03/24\n0 - \n[1827565]', commentaire: null, history: sampleHistory },
    { id: '3613059', type: 'CC F A', reference: '3613059', contrepartie: '70788432', dateValeur: '28 Feb 2024', montantAchat: '84,380.21 GBP N', montantVendu: '94,277.38 CHF', coursClient: '1.1172926', montantBaseAchat: '84,380.21', montantBaseVendu: '94,277.38', coursBase: '1.1172926', etatDateImport: '27/03/24\n0 - \n[1827627]', commentaire: '2024.06.20: QUITUS team advised: "Team is still busy with the Java upgrade and multiple vulnerabilities till Sept". Email TS: Tuesday, 11 June, 2024 11:30 AM', history: [] },
    { id: 'SC076523', type: 'TC F A', reference: '3706694\nSC076523', contrepartie: '', dateValeur: '02 Sep 2024', montantAchat: '2,850.12 EUR', montantVendu: '2,400.92 GBP N', coursClient: '0.8423938', montantBaseAchat: '2,850.12', montantBaseVendu: '2,400.92', coursBase: '0.8423938', etatDateImport: '03/09/24\n5 - \n[1907358]', commentaire: '2024.09.18: reminder sent / 2024.09.19: return of BO amount 681.03 will be spent at the end of the month on their usual process', history: sampleHistory.slice(5,8) },
    { id: '3706695', type: 'TT F A', reference: '3706695', contrepartie: '', dateValeur: '02 Sep 2024', montantAchat: '5,887,000.00 GBP N', montantVendu: '6,988,418.01 EUR', coursClient: '0.8423938', montantBaseAchat: '5,887,000.00', montantBaseVendu: '6,988,418.01', coursBase: '0.8423938', etatDateImport: '03/09/24\n0 - \n[1907365]', commentaire: '2024.09.18: reminder sent / 2024.09.19: return of BO amount 681.03 will be spent at the end of the month on their usual process', history: [] },
    { id: '3710039', type: 'CC F M', reference: '3710039', contrepartie: '70491515', dateValeur: '11 Sep 2024', montantAchat: '366.24 DKK N', montantVendu: '49.08 EUR', coursClient: '7.4621000', montantBaseAchat: '366.24', montantBaseVendu: '49.08', coursBase: '7.4621000', etatDateImport: '09/09/24\n5 - \n[1910243]', commentaire: '2024.09.10: FO deal in VAL status...', history: [] },
    { id: '3710040', type: 'CC F M', reference: '3710040', contrepartie: '70491515', dateValeur: '11 Sep 2024', montantAchat: '229.94 NOK N', montantVendu: '19.22 EUR', coursClient: '11.9658000', montantBaseAchat: '229.94', montantBaseVendu: '19.22', coursBase: '11.9658000', etatDateImport: '09/09/24\n5 - \n[1910129]', commentaire: '2024.09.10: FO deal in VAL status...', history: [] },
    { id: 'CC149589', type: 'CC F A', reference: '3712941\nCC149589', contrepartie: '70788432', dateValeur: '18 Sep 2024', montantAchat: '4,499.44 EUR', montantVendu: '5,000.00 USD N', coursClient: '1.1112500', montantBaseAchat: '4,499.44', montantBaseVendu: '5,000.00', coursBase: '1.1112500', etatDateImport: '18/09/24\n5 - \n[1914715]', commentaire: '2024.09.19: FO/BO FX induits...', history: [] },
];

// No Deal type definition needed in JSX

const DealsTable = () => {
    const totalDeals = 28;
    const orphansToComment = 6;
    const maxCommentLength = 254;

    // --- State for History Modal ---
    const [showHistoryModal, setShowHistoryModal] = useState(false);
    const [selectedDealHistory, setSelectedDealHistory] = useState([]); // Removed type annotation
    const [selectedDealReference, setSelectedDealReference] = useState('');

    // --- State for Comment Modal ---
    const [showCommentModal, setShowCommentModal] = useState(false);
    const [commentingDealId, setCommentingDealId] = useState(null); // Removed type annotation
    const [commentText, setCommentText] = useState('');


    // --- History Modal Handlers ---
    const handleCloseHistoryModal = () => setShowHistoryModal(false);
    const handleShowHistoryModal = (deal) => { // Removed type annotation
        setSelectedDealHistory(deal.history || []);
        setSelectedDealReference(deal.reference);
        setShowHistoryModal(true);
    };

    // --- Comment Modal Handlers ---
    const handleCloseCommentModal = () => {
        setShowCommentModal(false);
        setCommentText(''); // Clear comment text on close
        setCommentingDealId(null);
    };

    const handleShowCommentModal = (dealId) => { // Removed type annotation
        setCommentingDealId(dealId);
        setShowCommentModal(true);
    };

    const handleCommentChange = (event) => { // Removed type annotation
        // Prevent exceeding max length
        if (event.target.value.length <= maxCommentLength) {
            setCommentText(event.target.value);
        }
    };

    const handleSaveComment = () => {
        if (commentingDealId) {
            console.log(`Saving comment for deal ${commentingDealId}: "${commentText}"`);
            // --- TODO: Implement actual saving logic here ---
            // Example: Make an API call to update the comment for the deal
            // After successful save:
            // 1. Update the local dealsData state (if needed for immediate feedback)
            // 2. Close the modal
            handleCloseCommentModal();
        } else {
            console.error("No deal selected for commenting.");
            handleCloseCommentModal(); // Close modal even if there's an error
        }
    };


    // --- Function to render the Type column with Icon ---
    const renderTypeColumn = (deal) => { // Removed type annotation
        const parts = deal.type.split(' ');
        if (parts.length === 3) {
            return (
                <Stack direction="horizontal" gap={1} className="align-items-center">
                    <span>{parts[0]}</span>
                    <span>{parts[1]}</span>
                    <Button
                        variant="link"
                        size="sm"
                        className="p-0 mx-1 text-primary"
                        onClick={() => handleShowHistoryModal(deal)}
                        title={`Show history for ${deal.reference}`}
                        aria-label={`Show history for ${deal.reference}`}
                    >
                        <InfoCircleFill size={14}/>
                    </Button>
                    <span>{parts[2]}</span>
                </Stack>
            );
        }
        return <span style={{ whiteSpace: 'pre-line' }}>{deal.type}</span>;
    };

    return (
        <Container fluid className="mt-3">
            {/* Top Toolbar Section */}
            <Stack direction="horizontal" gap={3} className="mb-2 pb-2 border-bottom align-items-center justify-content-between flex-wrap">
              <div className="d-flex align-items-center gap-2 mb-1 mb-md-0"><QuestionCircleFill /> <span>Légende</span></div>
              <div className="d-flex align-items-center gap-2 mb-1 mb-md-0"><ExclamationTriangleFill color="orange" /> <span>Nombre d'orphelins restants à commenter : <Badge bg="danger">{orphansToComment}</Badge></span></div>
              <div className="d-flex align-items-center gap-3 flex-wrap justify-content-center justify-content-md-end">
                <Button variant="link" className="text-decoration-none text-secondary p-0 d-flex align-items-center gap-1"><PencilSquare /> <span>Saisie d'un commentaire</span></Button>
                <Button variant="link" className="text-decoration-none text-secondary p-0 d-flex align-items-center gap-1"><XOctagonFill /> <span>Suppression de l'orphelin</span></Button>
                <Button variant="link" className="text-decoration-none text-secondary p-0 d-flex align-items-center gap-1"><ArrowRepeat /> <span>Annulation de la suppression</span></Button>
                <Button variant="link" className="text-decoration-none text-secondary p-0 d-flex align-items-center gap-1"><ArrowLeftRight /> <span>Inversion du sens des CC</span></Button>
              </div>
            </Stack>

            {/* Info Line */}
            <p className="text-muted mb-2">true Nombre de deals: {totalDeals}</p>

            {/* Deals Table */}
            <Table striped bordered hover responsive size="sm">
                 <thead style={{ backgroundColor: '#dc3545', color: 'white' }}>
                    <tr>
                        <th>Type</th>
                        <th>Reference</th>
                        <th>Contrepartie</th>
                        <th>Date de Valeur</th>
                        <th>Montant Achat</th>
                        <th>Montant Vendu</th>
                        <th>Cours client</th>
                        <th>Montant de base Achat</th>
                        <th>Montant de base Vendu</th>
                        <th>Cours base</th>
                        <th>Etat et Date d'import</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    {/* Removed type assertion */}
                    {dealsData.map((deal, index) => (
                        <React.Fragment key={deal.id || index}>
                            <tr>
                                <td>{renderTypeColumn(deal)}</td>
                                <td style={{ whiteSpace: 'pre-line' }}>{deal.reference}</td>
                                <td>{deal.contrepartie}</td>
                                <td>{deal.dateValeur}</td>
                                <td className="text-end">{deal.montantAchat}</td>
                                <td className="text-end">{deal.montantVendu}</td>
                                <td className="text-end">{deal.coursClient}</td>
                                <td className="text-end">{deal.montantBaseAchat}</td>
                                <td className="text-end">{deal.montantBaseVendu}</td>
                                <td className="text-end">{deal.coursBase}</td>
                                <td style={{ whiteSpace: 'pre-line' }}>{deal.etatDateImport}</td>
                                <td className="text-center">
                                    <Stack direction="horizontal" gap={2} className="justify-content-center">
                                        {/* --- Updated Check Icon --- */}
                                        <Button
                                            variant="link"
                                            className="p-0"
                                            onClick={() => handleShowCommentModal(deal.id)}
                                            title="Commenter l'orphelin"
                                            aria-label="Commenter l'orphelin"
                                        >
                                            <CheckCircleFill color="green" style={{ cursor: 'pointer' }} />
                                        </Button>
                                        {/* --- End Updated Check Icon --- */}

                                        <Button
                                            variant="link"
                                            className="p-0"
                                            // Add onClick handler for delete/cancel if needed
                                            title="Supprimer l'orphelin"
                                            aria-label="Supprimer l'orphelin"
                                        >
                                             <XCircleFill color="red" style={{ cursor: 'pointer' }}/>
                                        </Button>
                                    </Stack>
                                </td>
                            </tr>
                            {/* Conditional Comment Row */}
                            {deal.commentaire && (
                                <tr className="table-info">
                                    <td colSpan={4}></td>
                                    <td colSpan={8}>
                                        <strong>Commentaire:</strong> {deal.commentaire}
                                    </td>
                                </tr>
                            )}
                        </React.Fragment>
                    ))}
                </tbody>
            </Table>

            {/* --- History Modal --- */}
            <Modal show={showHistoryModal} onHide={handleCloseHistoryModal} size="lg" centered>
                <Modal.Header closeButton>
                    <Modal.Title>Historique - Ref: <span style={{ whiteSpace: 'pre-line'}}>{selectedDealReference}</span></Modal.Title>
                </Modal.Header>
                <Modal.Body style={{ maxHeight: '60vh', overflowY: 'auto' }}>
                    {selectedDealHistory.length > 0 ? (
                        <Table striped bordered hover size="sm">
                            <thead>
                                <tr>
                                    <th>Action</th>
                                    <th>Commentaire</th>
                                    <th>Utilisateur</th>
                                    <th>Date</th>
                                </tr>
                            </thead>
                            <tbody>
                                {selectedDealHistory.map((entry, idx) => (
                                    <tr key={idx}>
                                        <td>{entry.action}</td>
                                        <td style={{ whiteSpace: 'pre-wrap', wordBreak: 'break-word' }}>
                                            {entry.commentaire}
                                        </td>
                                        <td>{entry.utilisateur}</td>
                                        <td>{entry.date}</td>
                                    </tr>
                                ))}
                            </tbody>
                        </Table>
                    ) : (
                        <p>Aucun historique disponible pour cette référence.</p>
                    )}
                </Modal.Body>
                <Modal.Footer>
                    <Button variant="secondary" onClick={handleCloseHistoryModal}>
                        Fermer
                    </Button>
                </Modal.Footer>
            </Modal>
            {/* --- End History Modal --- */}


             {/* --- Comment Modal --- */}
             <Modal show={showCommentModal} onHide={handleCloseCommentModal} centered>
                <Modal.Header closeButton>
                    <Modal.Title>Commenter l'orphelin</Modal.Title>
                </Modal.Header>
                <Modal.Body>
                    <p>Merci de saisir un commentaire pour l'action sélectionnée</p>
                    <Form.Group controlId="commentTextArea">
                        <Form.Label className='fw-bold'>Commentaire :</Form.Label>
                        <Form.Control
                            as="textarea"
                            rows={4}
                            value={commentText}
                            onChange={handleCommentChange}
                            maxLength={maxCommentLength} // HTML5 attribute for max length
                            style={{backgroundColor: '#f0f0d8'}} // Approximate background color
                        />
                        <Form.Text muted className="d-block text-end">
                            {maxCommentLength - commentText.length} restant(s)
                        </Form.Text>
                    </Form.Group>
                </Modal.Body>
                <Modal.Footer>
                    <Button variant="secondary" onClick={handleCloseCommentModal}>
                        Annuler
                    </Button>
                    <Button variant="primary" onClick={handleSaveComment}>
                        Sauvegarder
                    </Button>
                </Modal.Footer>
            </Modal>
            {/* --- End Comment Modal --- */}

        </Container>
    );
};

export default DealsTable;
